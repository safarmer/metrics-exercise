plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.4.2"
    id("com.google.cloud.tools.jib") version "2.6.0"
}

version = "0.1"
group = "co.thatch.example"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("co.thatch.example.metrics.*")
    }
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.reactor:micronaut-reactor")

    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:mysql")
    testImplementation("org.testcontainers:testcontainers")

    implementation("org.testcontainers:mysql")
    implementation("org.testcontainers:testcontainers")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("mysql:mysql-connector-java")

    testImplementation("com.google.truth:truth:1.1.2")
    testImplementation("org.mockito:mockito-core")
    testImplementation('org.hamcrest:hamcrest-all:1.3')
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")

}

application {
    mainClass.set("co.thatch.example.metrics.Application")
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}



jib {
    to {
        image = "gcr.io/myapp/jib-image"
    }
}

eclipse {
  jdt {
    apt {
      // whether annotation processing is enabled in Eclipse
      aptEnabled = compileJava.aptOptions.annotationProcessing
      // where Eclipse will output the generated sources; values are interpreted as per project.file()
      genSrcDir = file('.apt_generated')
      genTestSrcDir = file('.apt_generated_tests')
      // whether annotation processing is enabled in the editor
      reconcileEnabled = true
      // a map of annotation processor options; a null value will pass the argument as -Akey rather than -Akey=value
      processorOptions = compileJava.aptOptions.processorArgs
    }
  }

  factorypath {
    plusConfigurations = [ configurations.annotationProcessor, configurations.testAnnotationProcessor ]
    minusConfigurations = []
  }
}
